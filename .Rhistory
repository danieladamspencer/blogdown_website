blogdown::new_post("Bayesian Random Effects Models")
?blogdown::new_post
blogdown::new_post("Bayesian Random Effects Models",ext = '.Rmd')
blogdown:::serve_site()
file.edit(".Rprofile")
setwd("~/Desktop")
blogdown::new_site(theme="wowchemy/wowchemy-hugo-modules")
blogdown::new_site(dir = 'test',theme="wowchemy/wowchemy-hugo-modules")
?blogdown::new_site
setwd("~/github/blogdown_website/")
blogdown::new_site(dir = '../blogdown_website2',theme="wowchemy/wowchemy-hugo-modules")
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 3
sigma2_x_true <- 5
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 3
sigma2_x_true <- 5
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
# W is the observed data and S is the number of samples to draw from the
# posterior distribution.
mcmc_function <- function(W, S = 10000, a_sigma_e = 0.1, b_sigma_e = 1,
a_sigma_x = 0.1, b_sigma_x = 1, B = 100) {
# Start with initial conditions
sigma2_e <- mean(apply(W,1,var))
sigma2_x <- var(apply(W,1,mean))
X <- apply(W,1,mean)
# Preallocate storage for draws from the posterior distribution
mcmc_results <- list(
X = matrix(NA,n,S),
sigma2_e = numeric(S),
sigma2_x = numeric(S)
)
# Run the MCMC for 10k iterations
start_time <- proc.time()[3]
for(s in seq(S)) {
X <- rnorm(n, (1 / (1/sigma2_e + 2/sigma2_x)) * apply(W,1,sum)/sigma2_e,
sd = sqrt((1 / (1/sigma2_e + 2/sigma2_x))))
sigma2_x <- 1/rgamma(1,n/2 + a_sigma_x, b_sigma_x + sum(X^2)/2)
sigma2_e <- 1/rgamma(1,n + a_sigma_e, b_sigma_e + sum(apply(W,2,`-`,y =X)^2)/2)
mcmc_results$X[,s] <- X
mcmc_results$sigma2_e[s] <- sigma2_e
mcmc_results$sigma2_x[s] <- sigma2_x
}
total_time <- proc.time()[3] - start_time
cat("Total MCMC run time:",S,"draws in",total_time,"seconds \n")
# Remove burn-in
mcmc_results$X <- mcmc_results$X[,-seq(B)]
mcmc_results$sigma2_e <- mcmc_results$sigma2_e[-seq(B)]
mcmc_results$sigma2_x <- mcmc_results$sigma2_x[-seq(B)]
return(mcmc_results)
}
mcmc_results <- mcmc_function(W)
par(mfrow=c(2,1), mar = c(5,5,1,1))
plot(mcmc_results$sigma2_e, type='l', main = "", ylab = expression(sigma[e]^2), xlab = "Iteration")
plot(mcmc_results$sigma2_x, type='l', main = "", ylab = expression(sigma[x]^2), xlab = "Iteration")
par(mfrow=c(1,2))
plot(density(mcmc_results$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 1
sigma2_x_true <- 100
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results2 <- mcmc_function(W)
par(mfrow=c(1,2))
plot(density(mcmc_results2$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results2$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 1
sigma2_x_true <- 100
n <- 1000
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results3 <- mcmc_function(W)
par(mfrow=c(1,2))
plot(density(mcmc_results3$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results3$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 1
sigma2_x_true <- 100
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results4 <- mcmc_function(W, a_sigma_e = 2, b_sigma_e = 2, a_sigma_x = 2, b_sigma_x = 200)
par(mfrow=c(1,2))
plot(density(mcmc_results4$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results4$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 1
sigma2_x_true <- 100
n <- 1000
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results5 <- mcmc_function(W, a_sigma_e = 2, b_sigma_e = 2, a_sigma_x = 2, b_sigma_x = 200)
par(mfrow=c(1,2))
plot(density(mcmc_results5$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results5$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 100
sigma2_x_true <- 1
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results6 <- mcmc_function(W, a_sigma_e = 2, b_sigma_e = 200, a_sigma_x = 2, b_sigma_x = 2)
par(mfrow=c(1,2))
plot(density(mcmc_results6$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results6$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 100
sigma2_x_true <- 1
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,mean = 50, sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results6 <- mcmc_function(W, a_sigma_e = 2, b_sigma_e = 200, a_sigma_x = 2, b_sigma_x = 2)
par(mfrow=c(1,2))
plot(density(mcmc_results6$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results6$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 100
sigma2_x_true <- 1
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,mean = 50, sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results7 <- mcmc_function(W, a_sigma_e = 2, b_sigma_e = 200, a_sigma_x = 2, b_sigma_x = 2)
par(mfrow=c(1,2))
plot(density(mcmc_results7$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results7$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
plot(mcmc_results7$sigma2_e, type = 'l')
set.seed(47403) # Set this so the results are always the same
sigma2_e_true <- 100
sigma2_x_true <- 1
n <- 100
E <- matrix(rnorm(n*2, sd = sqrt(sigma2_e_true)),n,2)
X <- rnorm(n,mean = 1000, sd = sqrt(sigma2_x_true))
W <- cbind(X,X) + E
mcmc_results8 <- mcmc_function(W, a_sigma_e = 2, b_sigma_e = 200, a_sigma_x = 2, b_sigma_x = 2)
par(mfrow=c(1,2))
plot(density(mcmc_results8$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results8$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
par(mfrow=c(1,2))
plot(density(mcmc_results8$sigma2_e), main = "", xlab = expression(sigma[e]^2))
abline(v = sigma2_e_true, col = 'red')
plot(density(mcmc_results8$sigma2_x), main = "", xlab = expression(sigma[x]^2))
abline(v = sigma2_x_true, col = 'red')
str(mcmc_results8$X)
str(X)
load("~/Downloads/model_data.Rdata")
library(INLA)
inla.setOption(pardiso.license="/Users/yuyue/License/pardiso.lic")
# Make the linear combinations (generalizable to any number of tasks)
nvox <- length(model_data$bbeta1)/4
beta_names <- grep("bbeta", names(model_data), value = T)
K <- length(beta_names) # Number of tasks
inla.setOption(pardiso.license="~/licenses/pardiso.lic"0
inla.setOption(pardiso.license="~/licenses/pardiso.lic")
tmp1 <- Diagonal(n=mesh$n, x=0.5)
A1 <- cbind(tmp1, tmp1)
A2 <- A1
lc.beta1 <- inla.make.lincombs(bbeta1 = A1)
lc.beta2 <- inla.make.lincombs(bbeta2 = A2)
tmp1 <- Diagonal(n=mesh$n, x=0.5)
# Make the mesh and the spde
load("~/Downloads/binary_template.Rdata")
in_binary_template <- which(binary_template == 1, arr.ind = T)
in_binary_template <- in_binary_template[,2:1]
boundary <- inla.nonconvex.hull(in_binary_template,resolution = 100)
mesh <- inla.mesh.2d(loc = in_binary_template, boundary = boundary, max.edge = c(2,4))
spde <- inla.spde2.matern(mesh)
tmp1 <- Diagonal(n=mesh$n, x=0.5)
A1 <- cbind(tmp1, tmp1)
A2 <- A1
lc.beta1 <- inla.make.lincombs(bbeta1 = A1)
lc.beta2 <- inla.make.lincombs(bbeta2 = A2)
my_lc = c(lc.beta1, lc.beta2) ## Need to give different names
table(names(my_lc))
# This needs to be done to avoid repeating names of linear combinations
num_lc <- length(my_lc)
num_char <- as.character(nchar(as.character(num_lc)))
names(my_lc) <- sprintf(paste0("lc%0",num_char,".0f"),seq(num_lc))
table(names(my_lc))
# Set up the INLA formula
repl_names <- grep("repl", names(model_data), value = T)
hyper_initial <- c(-2,2)
hyper_initial <- rep(list(hyper_initial), K)
hyper_vec <- paste0(', hyper=list(theta=list(initial=', hyper_initial, '))')
formula_vec <- paste0('f(',beta_names, ', model = spde, replicate = ', repl_names, hyper_vec, ')')
formula_vec <- c('y ~ -1', formula_vec)
formula_str <- paste(formula_vec, collapse=' + ')
formula <- as.formula(formula_str, env = globalenv())
bbeta2 = c(rep(NA, nvox), mesh$idx$loc, rep(NA, nvox), mesh$idx$loc)
model_data$bbeta2 = bbeta2
# Run INLA
result <- inla(formula, data = model_data,
control.predictor = list(A=model_data$X, compute= TRUE),
verbose = F, keep = FALSE, num.threads = 4,
control.inla = list(strategy = "gaussian", int.strategy = "eb"),
control.family = list(hyper = list(prec=list(initial = 1))),
control.compute = list(config=TRUE), contrasts = NULL,
lincomb = my_lc)
my_lc.result = result$summary.lincomb.derived
table(model_data$bbeta2)
tail(table(model_data$bbeta2))
str(A1)
blogdown::hugo_build()
blogdown:::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(magrittr)
library(maps)
library(ggmap)
library(RColorBrewer)
data("county.fips")
ca_counties <- grep("california",county.fips$polyname)
ca_fips <- county.fips[ca_counties,] %>%
mutate(County = toupper(substring(polyname,12)))
elec <- read.csv("D:/Downloads/ElectricityByCounty.csv")
elec <- read.csv("~/Downloads/ElectricityByCounty.csv")
pop <- read_xls("~/Downloads/E-1_2020_InternetVersion.xls",sheet=4)
pop <- read_xls("~/Downloads/E-1_2020_InternetVersion.xlsx",sheet=4)
pop <- read_xlsx("~/Downloads/E-1_2020_InternetVersion.xlsx",sheet=4)
pop <- read_xlsx("~/Downloads/E-1_2020_InternetVersion.xlsx",sheet=3)
View(pop)
pop <- read_xlsx("~/Downloads/E-1_2020_InternetVersion.xlsx",sheet=3,skip = 1)
View(pop)
pop <- read_xlsx("~/Downloads/E-1_2020_InternetVersion.xlsx",sheet=3,skip = 2)
pop %<>%
dplyr::mutate(County = toupper(`State/County`),
Population = `Total Population 1/1/2019`/1000) %>%
as.data.frame
pop %<>%
dplyr::mutate(County = toupper(`State/County`),
Population = `Total Population 1/1/2019`/1000) %>%
dplyr::filter(County != "CALIFORNIA") %>%
as.data.frame
elec %<>%
set_colnames(c("County","Sector","Electricity","Total")) %>%
dplyr::select(County,Electricity) %>%
dplyr::mutate(County = as.character(County))
pop_elec <- left_join(pop,elec,by="County") %>%
dplyr::mutate(elec_per_cap = Electricity / Population) %>%
left_join(ca_fips,by = "County")
pop_elec$elec_bin <- as.numeric(cut(pop_elec$elec_per_cap,c(4,6,8,10,12,14,16,18,20)))
col_pal <- brewer.pal(8,"PuRd")
leg_txt <- c("4-6 GWh/1000 people",
"6-8 GWh/1000 people",
"8-10 GWh/1000 people",
"10-12 GWh/1000 people",
"12-14 GWh/1000 people",
"14-16 GWh/1000 people",
"16-18 GWh/1000 people",
">18 GWh/1000 people")
par(mar=c(0,0,0,0))
maps::map("county",regions = "california",col = col_pal[pop_elec$elec_bin],fill = TRUE)
# title("California Energy Use (GwH/1000 people)")
legend(-126,36,legend = leg_txt,bty="n",fill = col_pal,cex = 0.6,xpd=TRUE)
par(mar=c(0,0,0,0))
maps::map("county",regions = "california",col = col_pal[pop_elec$elec_bin],fill = TRUE)
# title("California Energy Use (GwH/1000 people)")
legend(-126,36,legend = leg_txt,bty="n",fill = col_pal,cex = 0.6,xpd=TRUE)
text(-116.5,40,labels = "California\n Energy Use\n (2016)",cex=1.3)
mtext(side=1,line = 0,at = -119,
text="Sources: ecdms.energy.ca.gov/elecbycounty.aspx and\n http://www.dof.ca.gov/Forecasting/Demographics/Estimates/E-1/",
cex=0.6)
View(pop_elec)
pop_elec$elec_bin <- as.numeric(cut(pop_elec$elec_per_cap,c(4,6,8,10,12,14,16,18,100)))
col_pal <- brewer.pal(8,"PuRd")
leg_txt <- c("4-6 GWh/1000 people",
"6-8 GWh/1000 people",
"8-10 GWh/1000 people",
"10-12 GWh/1000 people",
"12-14 GWh/1000 people",
"14-16 GWh/1000 people",
"16-18 GWh/1000 people",
">18 GWh/1000 people")
par(mar=c(0,0,0,0))
maps::map("county",regions = "california",col = col_pal[pop_elec$elec_bin],fill = TRUE)
# title("California Energy Use (GwH/1000 people)")
legend(-126,36,legend = leg_txt,bty="n",fill = col_pal,cex = 0.6,xpd=TRUE)
text(-116.5,40,labels = "California\n Energy Use\n (2016)",cex=1.3)
mtext(side=1,line = 0,at = -119,
text="Sources: ecdms.energy.ca.gov/elecbycounty.aspx and\n http://www.dof.ca.gov/Forecasting/Demographics/Estimates/E-1/",
cex=0.6)
par(mar=c(0,0,0,0))
maps::map("county",regions = "california",col = col_pal[pop_elec$elec_bin],fill = TRUE)
# title("California Energy Use (GwH/1000 people)")
legend(-126,36,legend = leg_txt,bty="n",fill = col_pal,cex = 0.6,xpd=TRUE)
text(-116.5,40,labels = "California\n Energy Use\n (2016)",cex=1.3)
mtext(side=1,line = 0,at = -119,
text="Sources: ecdms.energy.ca.gov/elecbycounty.aspx and\n http://www.dof.ca.gov/Forecasting/Demographics/Estimates/E-1/",
cex=0.6)
text(-116.5,40,labels = "California\n Energy Use\n (2017)",cex=1.3)
par(mar=c(0,0,0,0))
maps::map("county",regions = "california",col = col_pal[pop_elec$elec_bin],fill = TRUE)
# title("California Energy Use (GwH/1000 people)")
legend(-126,36,legend = leg_txt,bty="n",fill = col_pal,cex = 0.6,xpd=TRUE)
text(-116.5,40,labels = "California\n Energy Use\n (2017)",cex=1.3)
mtext(side=1,line = 0,at = -119,
text="Sources: ecdms.energy.ca.gov/elecbycounty.aspx and\n http://www.dof.ca.gov/Forecasting/Demographics/Estimates/E-1/",
cex=0.6)
blogdown::hugo_build()
