blogdown::hugo_build()
blogdown:::new_post_addin()
install.packages(c("XML","tm","wordcloud"))
##### Word cloud fun
library(XML)
library(tm)
library(wordcloud)
library(RColorBrewer)
Lisa <- read.csv("~/Downloads/Lisa.csv") #Note: Replace with your own .csv
Jo <- Lisa$message
Jo.corpus <- Corpus(DataframeSource(data.frame(as.character(Jo))))
sum(is.na(Jo))
?DataframeSource
View(Lisa)
View(Lisa)
blogdown:::new_post_addin()
blogdown::serve_site()
Lisa <- read.csv("~/Downloads/Lisa.csv") #Note: Replace with your own .csv
Jo <- Lisa$message
Jo.corpus <- Corpus(DataframeSource(data.frame(as.character(Jo))))
##### Word cloud fun
library(XML)
library(tm)
library(wordcloud)
library(RColorBrewer)
Jo.corpus <- Corpus(DataframeSource(data.frame(as.character(Jo))))
Jo.corpus <- tm_map(Jo.corpus, removePunctuation)
Jo <- Lisa$message
Jo.corpus <- Corpus(DataframeSource(data.frame(as.character(Jo))))
table(is.na(Jo))
class(Jo)
str(data.frame(jo))
str(data.frame(Jo))
?DataframeSource
Jo <- data.frame(doc_id = Lisa$timestamp, text = Lisa$message)
Jo.corpus <- Corpus(DataframeSource(Jo))
Jo.corpus <- tm_map(Jo.corpus, removePunctuation)
Jo.corpus <- tm_map(Jo.corpus, content_transformer(tolower))
Jo.corpus <- tm_map(Jo.corpus, removeWords, stopwords("english"))
Jo.m <- as.matrix(Jo.tdm)
Jo.tdm <- TermDocumentMatrix(Jo.corpus)
Jo.m <- as.matrix(Jo.tdm)
Jo.v <- sort(rowSums(Jo.m),decreasing=TRUE)
Jo.d <- data.frame(word = names(Jo.v),freq = Jo.v)
table(Jo.d$freq)
pal2 <- brewer.pal(8,"Dark2")
# windows(width = 12, height = 12)
wordcloud(Jo.d$word,Jo.d$freq,scale = c(8,.2),min.freq = 3,random.order = FALSE, rot.per = .15, colors = pal2)
Lisa <- read.csv("~/Downloads/Lisa.csv") #Note: Replace with your own .csv
Lisa_df <- data.frame(doc_id = Lisa$timestamp, text = Lisa$message)
Lisa.corpus <- Corpus(DataframeSource(Lisa_df))
Lisa.corpus <- tm_map(Lisa.corpus, removePunctuation)
Lisa.corpus <- tm_map(Lisa.corpus, content_transformer(tolower))
Lisa.corpus <- tm_map(Lisa.corpus, removeWords, stopwords("english"))
Lisa.tdm <- TermDocumentMatrix(Lisa.corpus)
Lisa.m <- as.matrix(Lisa.tdm)
Lisa.v <- sort(rowSums(Lisa.m),decreasing=TRUE)
Lisa.d <- data.frame(word = names(Lisa.v),freq = Lisa.v)
table(Lisa.d$freq)
pal2 <- brewer.pal(8,"Dark2")
# windows(width = 12, height = 12)
wordcloud(Lisa.d$word,Lisa.d$freq,scale = c(8,.2),min.freq = 3,random.order = FALSE, rot.per = .15, colors = pal2)
?wordcloud
Lisa <- read.csv("~/Downloads/Lisa.csv") #Note: Replace with your own .csv
Lisa_df <- data.frame(doc_id = Lisa$timestamp, text = Lisa$message)
Lisa.corpus <- Corpus(DataframeSource(Lisa_df))
Lisa.corpus <- tm_map(Lisa.corpus, removePunctuation)
Lisa.corpus <- tm_map(Lisa.corpus, content_transformer(tolower))
Lisa.corpus <- tm_map(Lisa.corpus, removeWords, stopwords("english"))
Lisa.tdm <- TermDocumentMatrix(Lisa.corpus)
Lisa.m <- as.matrix(Lisa.tdm)
Lisa.v <- sort(rowSums(Lisa.m),decreasing=TRUE)
Lisa.d <- data.frame(word = names(Lisa.v),freq = Lisa.v)
table(Lisa.d$freq)
pal2 <- brewer.pal(8,"Dark2")
wordcloud(Lisa.d$word,Lisa.d$freq,scale = c(8,.2),min.freq = 3,random.order = FALSE, rot.per = .15, colors = pal2)
Kurtis <- read.csv("~/Downloads/Kurtis.csv") #Note: Replace with your own .csv
Kurtis_df <- data.frame(doc_id = Kurtis$timestamp, text = Kurtis$message)
Kurtis.corpus <- Corpus(DataframeSource(Kurtis_df))
Kurtis.corpus <- tm_map(Kurtis.corpus, removePunctuation) # Take out punctuation
Kurtis.corpus <- tm_map(Kurtis.corpus, content_transformer(tolower)) # Make everything lower case
Kurtis.corpus <- tm_map(Kurtis.corpus, removeWords, stopwords("english")) # Get rid of common English words
Kurtis.tdm <- TermDocumentMatrix(Kurtis.corpus) # Get the words organized by the documents they appear in
Kurtis.m <- as.matrix(Kurtis.tdm)
Kurtis.v <- sort(rowSums(Kurtis.m),decreasing=TRUE) # Order the words by frequency
Kurtis.d <- data.frame(word = names(Kurtis.v),freq = Kurtis.v) # Put it into a data frame including the words themselves
pal2 <- brewer.pal(8,"Dark2") # Define the color palette for the plot
wordcloud(Kurtis.d$word,Kurtis.d$freq,scale = c(8,.2),
min.freq = 3,random.order = FALSE, rot.per = .15, colors = pal2)
blogdown:::serve_site()
set.seed(47403)
W <-
latent_random_effects_data(
n = 100,
J = 2,
K = 5,
mu = rep(0,5),
sigma2 = 1:5,
sigma2_e = 5
)
latent_random_effects_data <- function(n,J,K, mu, tau2, sigma2) {
E <- array(rnorm(n*J*K, sd = sqrt(sigma2)), dim = c(n,J,K))
X <- sapply(seq(K), function(k) {
X_k <- rnorm(n, mean = mu[k], sd = sqrt(tau2[k]))
return(X_k)
})
means <- X %o% array(1,dim = J)
W <- aperm(means,perm = c(1,3,2)) + E
return(W)
}
set.seed(47403)
W <-
latent_random_effects_data(
n = 100,
J = 2,
K = 5,
mu = rep(0,5),
sigma2 = 1:5,
sigma2_e = 5
)
set.seed(47403)
W <-
latent_random_effects_data(
n = 100,
J = 2,
K = 5,
mu = rep(0,5),
tau2 = 1:5,
sigma2 = 5
)
set.seed(47403)
W <-
latent_random_effects_data(
n = 100,
J = 2,
K = 5,
mu = rep(0,5),
tau2 = 1:5,
sigma2 = 5
)
boxplot(apply(W,3,identity))
set.seed(47403)
W <-
latent_random_effects_data(
n = 100,
J = 2,
K = 5,
mu = seq(2,10,length.out = 5),
tau2 = 1:5,
sigma2 = 5
)
boxplot(apply(W,3,identity), xlab = "Component")
boxplot(apply(W,3,identity), xlab = "Component", ylab = "Observed Data")
boxplot(apply(W,3,identity), xlab = "Component", ylab = "Observed Data",
main = "Data summaries within the different components")
apply(W,2:3,var)
total_var <- apply(W,2:3,var)
visit_var <- apply(total_var,2,mean)
visit_diff <- W[,1,] - W[,2,]
noise_var <- apply(visit_diff,2,var) / 2
latent_var <- visit_var - noise_var
latent_var
visit_var
apply(W,3,var)
apply(W,3,function(W_k) var(c(W_k)))
var(c(W))
rep_component_var <- apply(W,2:3,var)
rep_var <- apply(rep_component_var,2,mean)
visit_diff <- W[,1,] - W[,2,]
noise_var <- apply(visit_diff,2,var) / 2
latent_var <- rep_var - noise_var
latent_var
source("basic_bayesian_random_effects.R")
source("basic_bayesian_random_effects.R")
latent_effects_mcmc_results <- latent_random_effects_mcmc(W, variance_priors = "eb_IG", hyperparameters = list(prior_means = apply(W,3,mean)))
latent_variance_densities <- apply(latent_effects_mcmc_results$tau2,1,density)
latent_variance_densities[[1]]$x[which.max(latent_variance_densities[[1]]$y)]
Bayes_latent_var <- sapply(latent_variance_densities, function(vd_k) {
return(vd_k$x[which.max(vd_k$y)])
})
Bayes_latent_var
library(ggplot2)
tau2_df <- reshape2::melt(latent_effects_mcmc_results$tau2)
?reshape2::melt
tau2_df <- reshape2::melt(latent_effects_mcmc_results$tau2,
varnames = c("Component","Posterior Draw"),
value.name = "Variance")
ggplot(tau2_df) + geom_line(aes(x = "Posterior Draw", y = "Variance")) + facet_wrap(~"Component")
ggplot(tau2_df) + geom_line(aes(x = "Posterior Draw", y = "Variance")) + facet_wrap(~Component)
View(tau2_df)
?geom_line
?facet_wrap
ggplot(tau2_df) + geom_line(aes(x = "Posterior Draw", y = "Variance")) + facet_wrap(Component)
ggplot(tau2_df) + geom_line(aes(x = "Posterior Draw", y = "Variance")) + facet_wrap(~Component)
ggplot(tau2_df) + geom_line(aes(x = "Posterior Draw", y = "Variance")) + facet_grid(~Component)
ggplot(tau2_df) + geom_line(aes(x = `Posterior Draw`, y = "Variance")) + facet_grid(~Component)
ggplot(tau2_df) + geom_line(aes(x = `Posterior Draw`, y = `Variance`)) + facet_grid(~Component)
ggplot(tau2_df) + geom_line(aes(x = `Posterior Draw`, y = `Variance`)) + facet_grid(Component~)
ggplot(tau2_df) + geom_line(aes(x = `Posterior Draw`, y = `Variance`)) + facet_grid(Component~.)
?facet_grid
ggplot(tau2_df) +
geom_line(aes(x = `Posterior Draw`, y = `Variance`)) +
facet_grid(Component~., labeller = paste("Component",Component))
ggplot(tau2_df) +
geom_line(aes(x = `Posterior Draw`, y = `Variance`)) +
facet_grid(Component~., labeller = expression(paste("Component",Component)))
ggplot(tau2_df) +
geom_line(aes(x = `Posterior Draw`, y = `Variance`)) +
facet_grid(Component~., labeller = labeller(Component = paste("Component",1:5)))
tau2_df$Component <- as.factor(tau2_df$Component)
ggplot(tau2_df) +
geom_line(aes(x = `Posterior Draw`, y = `Variance`)) +
facet_grid(Component~., labeller = labeller(Component = paste("Component",1:5)))
tau2_df <- reshape2::melt(latent_effects_mcmc_results$tau2,
varnames = c("Component","Posterior Draw"),
value.name = "Variance")
tau2_df$Component <- paste("Component",tau2_df$Component)
ggplot(tau2_df) +
geom_line(aes(x = `Posterior Draw`, y = `Variance`)) +
facet_grid(Component~.)
ggplot(tau2_df) +
geom_line(aes(x = `Posterior Draw`, y = `Variance`)) +
facet_grid(Component~., scales = "free")
library(ggplot2)
tau2_df <- reshape2::melt(latent_effects_mcmc_results$tau2,
varnames = c("Component","Posterior Draw"),
value.name = "Variance")
tau2_df$Component <- paste("Component",tau2_df$Component)
ggplot(tau2_df) +
geom_line(aes(x = `Posterior Draw`, y = `Variance`)) +
facet_grid(Component~., scales = "free")
par(mfrow=c(1,2))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Iteration\n(post burn-in)",
ylab = "Observation Variance",
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
type = 'n', xlab = "Iteration\n(post burn-in)",
ylab = "Mean Random Effect",
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Iteration\n(post burn-in)",
ylab = "Observation Variance",
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
type = 'n', xlab = "Iteration\n(post burn-in)",
ylab = "Mean Random Effect",
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance",sigma^2)),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = "Mean Random Effect",
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = "Mean Random Effect",
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = "Mean Random Effect",
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2), mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = "Mean Random Effect",
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2), mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Mean Random Effect ",(mu[k]))),
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2), mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
ylim = c(1,11),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Mean Random Effect ",(mu[k]))),
main = "Trace Plots for the Average Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2), mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
ylim = c(1,11),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Mean Random Effect ",(mu[k]))),
main = "Trace Plots for the Mean Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2), mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
# ylim = c(1,11),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Mean Random Effect ",(mu[k]))),
main = "Trace Plots for the Mean Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mfrow=c(1,2), mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
ylim = c(1,11),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Mean Random Effect ",(mu[k]))),
main = "Trace Plots for the Mean Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
ylim = c(1,11),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Mean Random Effect ",(mu[k]))),
main = "Trace Plots for the Mean Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
par(mar = c(5,5,5,1))
plot(latent_effects_mcmc_results$sigma2, type = 'l',
xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Noise Variance ",(sigma^2))),
main = "Trace Plot for Observation Variance\n(True Value is 5)")
abline(h = 5, col = 'white', lty = 3)
trace_mean_effect <- apply(latent_effects_mcmc_results$X,2:3,mean)
plot(x = as.numeric(summary(seq(ncol(trace_mean_effect)))),
y = as.numeric(summary(c(trace_mean_effect))),
ylim = c(1,11),
type = 'n', xlab = "Posterior Draw\n(post burn-in)",
ylab = expression(paste("Mean Random Effect ",(mu[k]))),
main = "Trace Plots for the Mean Random Effect\n(True Values Shown in Legend)")
lines(trace_mean_effect[1,], col = 'red')
lines(trace_mean_effect[2,], col = 'blue')
lines(trace_mean_effect[3,], col = 'green')
lines(trace_mean_effect[4,], col = 'purple')
lines(trace_mean_effect[5,], col = 'cornflowerblue')
legend("top", lty = 1, legend = seq(2,10,length.out = 5), col = c('red','blue','green','purple','cornflowerblue'), horiz = T)
blogdown::hugo_build()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
install.packages("tufte")
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
COVID_probability <- function(sensitivity) {
numerator <- 0.8*0.093*0.008
denominator <- (0.8*0.008 + 0.01*0.992) * (0.093*0.008 + sensitivity * 0.992)
return(numerator / denominator)
}
curve(COVID_probability,from =0.5, to = 1)
curve(COVID_probability,from =0.5, to = 1, xlab = "Sensitivity", ylab = "COVID Probability")
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::hugo_build()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
COVID_probability <- function(specificity) {
numerator <- 0.8*0.093*0.008
denominator <- (0.8*0.008 + 0.01*0.992) * (0.093*0.008 + specificity * 0.992)
return(numerator / denominator)
}
curve(COVID_probability,from = 0.5, to = 1, xlab = "Specificity", ylab = "COVID Probability")
blogdown:::serve_site()
